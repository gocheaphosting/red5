<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>

	<!-- Placeholder Config: loads a property file with config values -->
	<bean id="placeholderConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	    <property name="location"><value>/conf/red5.properties</value></property>
	</bean>
	
	<!-- Server: This is the core, call startup method to boot up -->
	<bean id="server" class="org.red5.server.Server" init-method="startup"> 
	    <property name="networkManager"><ref bean="networkManager" /></property>
	    <property name="sessionRegistry"><ref bean="sessionRegistry" /></property>
	</bean>
	 
	<!-- Network Manager, adds services to mina registry -->
	<bean id="networkManager" class="org.red5.server.net.NetworkManager">
		<property name="serviceConfig">
			<map>
				<entry key="rtmp"><map>
					<entry key="port"><value>1934</value></entry>
					<entry key="handler"><ref bean="rtmpHandler" /></entry>
				</map></entry>
				<entry key="rtmp2"><map>
					<entry key="port"><value>1936</value></entry>
					<entry key="handler"><ref bean="rtmpProtocolProvider" /></entry>
				</map></entry>
				<!--
				<entry key="remoting"><map>
					<entry key="port"><value>${remoting.port}</value></entry>
					<entry key="handler"><ref bean="remotingHandler" /></entry>
				</map></entry>
				-->
			</map>
		</property>
	</bean> 
		
	<!-- RTMP Protcol Handler: handles the handshake, 
	passes rtmp session and packet to session handler -->
	<bean id="rtmpHandler" class="org.red5.server.protocol.rtmp.NetworkHandler">
		<property name="maxConnections"><value>${rtmp.max_connections}</value></property>
		<property name="sessionHandler"><ref bean="rtmpSessionHandler" /></property>
	</bean>

	<!-- RTMP Session Hanlder: consumes packets and processes them -->
	<bean id="rtmpSessionHandler" class="org.red5.server.protocol.rtmp.SessionHandler">
		<property name="sessionRegistry"><ref bean="sessionRegistry" /></property>
		<property name="serializer"><ref bean="serializer" /></property>
		<property name="deserializer"><ref bean="deserializer" /></property>
		<property name="globalContext"><ref bean="globalContext" /></property>
		<property name="statusObjectService"><ref bean="statusObjectService" /></property>
	</bean>
	
	<!-- Session Registry: central location for client sessions -->
	<bean id="sessionRegistry" class="org.red5.server.SessionRegistry">
	</bean>
	
	<!-- Serializer: serializer supporting general Output objects -->
	<bean id="serializer" class="org.red5.server.io.Serializer" />

	<!-- Deserializer: deserializer supporting general Input objects -->
	<bean id="deserializer" class="org.red5.server.io.Deserializer" />
    
    	<!-- Service Context: context for exposed services, see service.xml --> 	
	<bean id="globalContext" class="org.red5.server.context.GlobalContext"
		init-method="initialize">
        <constructor-arg><value>./conf/global.xml</value></constructor-arg>
    </bean>


    <bean id="statusObjectService"
		class="org.red5.server.protocol.rtmp.status2.StatusObjectService" 
		init-method="initialize">
		<property name="serializer">
    			<ref bean="serializer" />
    		</property>
    </bean>

    <bean id="rtmpProtocolProvider"
		class="org.red5.server.rtmp.RTMPProtocolProvider">
		<property name="handler">
    			<ref bean="rtmpSessionHandler2" />
    		</property>
    	</bean>
	
	<bean id="rtmpProtocolEncoder"
		class="org.red5.server.rtmp.codec.ProtocolEncoder">
		<property name="serializer">
    			<ref bean="serializer" />
    		</property>
	</bean>
	
	<bean id="rtmpProtocolDecoder"
		class="org.red5.server.rtmp.codec.ProtocolDecoder">
		<property name="deserializer">
    			<ref bean="deserializer" />
    		</property>
	</bean>
	
	<bean id="serviceInvoker" class="org.red5.server.service.ServiceInvoker" />
		
	<bean id="rtmpSessionHandler2"
		class="org.red5.server.rtmp.RTMPSessionHandler">
		<property name="statusObjectService"><ref bean="statusObjectService" /></property>
		<property name="serviceInvoker"><ref bean="serviceInvoker" /></property>
		<property name="globalContext"><ref bean="globalContext" /></property>
	</bean>
	
	<!-- Start of Status Messages -->
    <!-- Status Service: caches status objects and returns a ByteBuffer --> 
    <!--
    <bean id="statusService"
    	class="org.red5.server.protocol.rtmp.status.StatusService"
    	init-method="cache" singleton="true">
    	<property name="serializer">
    		<ref bean="serializer" />
    	</property>
    	<property name="connectionStatus">
    		<ref bean="connectionStatus" />
    	</property>
    	<property name="applicationStatus">
    		<ref bean="applicationStatus" />
    	</property>
    </bean>
    -->
    <!-- Application Status: returns application related Status objects --> 	
	<!--
	<bean id="applicationStatus"
		class="org.red5.server.protocol.rtmp.status.ApplicationStatus">
    </bean>
    
    <bean id="connectionStatus"
		class="org.red5.server.protocol.rtmp.status.ConnectionStatus">
    </bean>
    -->
	<!-- End of Status Messages -->	
	
</beans>